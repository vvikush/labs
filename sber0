#include <stdlib.h>
#include "stack.h"

void init(struct stack* s) {
    if (s != NULL) {
        s->top = NULL;
    }
}

int push(struct stack* s, int value) {
    int result = FAIL;
    if (s != NULL) {
        struct stack_node* new_node = malloc(sizeof(struct stack_node));
        if (new_node != NULL) {
            new_node->value = value;
            new_node->next = s->top;
            s->top = new_node;
            result = SUCCESS;
        }
    }
    return result;
}

int pop(struct stack* s, int* value) {
    int result = FAIL;
    if (s != NULL && s->top != NULL && value != NULL) {
        struct stack_node* temp = s->top;
        *value = temp->value;
        s->top = temp->next;
        free(temp);
        result = SUCCESS;
    }
    return result;
}

void destroy(struct stack* s) {
    if (s != NULL) {
        struct stack_node* current = s->top;
        while (current != NULL) {
            struct stack_node* next = current->next;
            free(current);
            current = next;
        }
        s->top = NULL;
    }
}


#ifndef STACK_H
#define STACK_H

#define SUCCESS 0
#define FAIL 1

struct stack_node {
    int value;
    struct stack_node* next;
};

struct stack {
    struct stack_node* top;
};

void init(struct stack* s);
int push(struct stack* s, int value);
int pop(struct stack* s, int* value);
void destroy(struct stack* s);

#endif  // STACK_H




CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -g

# Путь и имя исполняемого файла для door_struct
DOOR_TARGET = build/Quest_1
DOOR_SRC = src/dmanager_module.c

.PHONY: all clean door_struct list_test stack_test

all: door_struct list_test stack_test

door_struct:
	mkdir -p build
	$(CC) $(CFLAGS) -o $(DOOR_TARGET) $(DOOR_SRC)

list_test:
	@echo "Добавь правила сюда позже"

stack_test:
	@echo "Добавь правила сюда позже"

clean:
	rm -rf build


CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -g
TARGET = build/Quest_1
SRC = src/dmanager_module.c

all: $(TARGET)

$(TARGET): $(SRC)
	mkdir -p build
	$(CC) $(CFLAGS) -o $(TARGET) $(SRC)

clean:
	rm -rf build


CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -g
TARGET = build/Quest_1
SRC = src/dmanager_module.c

all: $(TARGET)

$(TARGET): $(SRC)
	mkdir -p build
	$(CC) $(CFLAGS) -o $(TARGET) $(SRC)

clean:
	rm -rf build




#include <stdio.h>
#include <stdlib.h> 
#include <time.h> 
#include "door_struct.h"

#define DOORS_COUNT 15
#define MAX_ID_SEED 10000

void initialize_doors(struct door* doors);

// функция сортировки и закрытия дверей
void sort_and_close_doors(struct door* doors, int count);

int main() {
    struct door doors[DOORS_COUNT];

    initialize_doors(doors);
    sort_and_close_doors(doors, DOORS_COUNT);

    return 0;
}

// Doors initialization function
// ATTENTION!!!
// DO NOT CHANGE!
void initialize_doors(struct door* doors) {
    srand(time(0)); 
    
    int seed = rand() % MAX_ID_SEED;
    for (int i = 0; i < DOORS_COUNT; i++) {
        doors[i].id = (i + seed) % DOORS_COUNT;
        doors[i].status = rand() % 2;
    }
}

// функция сортировки пузырьком и закрытия дверей
void sort_and_close_doors(struct door* doors, int count) {
    int i = 0;
    int j = 0;
    struct door temp;

    for (i = 0; i < count - 1; i++) {
        for (j = 0; j < count - i - 1; j++) {
            if (doors[j].id > doors[j + 1].id) {
                temp = doors[j];
                doors[j] = doors[j + 1];
                doors[j + 1] = temp;
            }
        }
    }

    for (i = 0; i < count; i++) {
        doors[i].status = 0;
        printf("%d, %d\n", doors[i].id, doors[i].status);
    }
}


