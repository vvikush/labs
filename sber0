#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int read_command(int *cmd) {
    return scanf("%d", cmd) == 1;
}

int file_exists_and_show(const char *path) {
    FILE *f = fopen(path, "r");
    if (f == NULL) return 0;

    int is_empty = 1;
    char ch;
    while ((ch = fgetc(f)) != EOF) {
        putchar(ch);
        is_empty = 0;
    }
    fclose(f);
    return !is_empty;
}

int load_file(char *path) {
    if (scanf("%255s", path) != 1) return 0;
    return file_exists_and_show(path);
}

int write_to_file(const char *path) {
    char line[MAX_LINE];
    scanf(" ");
    if (!fgets(line, MAX_LINE, stdin)) return 0;

    size_t len = strlen(line);
    if (len > 0 && line[len - 1] == '\n') {
        line[len - 1] = '\0';
    }

    FILE *f = fopen(path, "a");
    if (f == NULL) return 0;

    fprintf(f, "\n%s", line);
    fclose(f);
    return file_exists_and_show(path);
}

int main() {
    int cmd = 0;
    int loaded = 0;
    char path[MAX_PATH] = "";
    int running = 1;

    while (running) {
        if (!read_command(&cmd)) {
            printf("n/a\n");
            return 0;
        }

        if (cmd == -1) return 0;

        if (cmd == 1) {
            if (load_file(path)) {
                loaded = 1;
            } else {
                printf("n/a\n");
                loaded = 0;
            }
            printf("\n");
        }

        if (cmd == 2) {
            if (!loaded || !write_to_file(path)) {
                printf("n/a\n");
            }
            printf("\n");
        }
    }

    return 0;
}




include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int read_command(int *command) {
    return scanf("%d", command) == 1;
}

int open_and_print_file(const char *path) {
    FILE *file = fopen(path, "r");
    int result = 1;

    if (file != NULL) {
        int empty = 1;
        char ch;
        while ((ch = fgetc(file)) != EOF) {
            putchar(ch);
            empty = 0;
        }
        fclose(file);
        if (!empty) {
            result = 0;
        }
    }

    return result;
}

int load_file(char *file_path, int *file_loaded) {
    int result = 1;
    if (scanf("%255s", file_path) == 1) {
        if (open_and_print_file(file_path) == 0) {
            *file_loaded = 1;
            result = 0;
        } else {
            *file_loaded = 0;
        }
    }
    return result;
}

int write_to_file(const char *path) {
    int result = 1;
    char line[MAX_LINE];

    scanf(" ");
    if (fgets(line, MAX_LINE, stdin)) {
        size_t len = strlen(line);
        if (len > 0 && line[len - 1] == '\n') {
            line[len - 1] = '\0';
        }

        FILE *file = fopen(path, "a");
        if (file != NULL) {
            fprintf(file, "\n%s", line);
            fclose(file);
            result = open_and_print_file(path);
        }
    }

    return result;
}

int main() {
    int running = 1;
    int command = 0;
    int file_loaded = 0;
    char file_path[MAX_PATH] = "";

    while (running) {
        if (read_command(&command)) {
            if (command == -1) {
                running = 0;
            } else if (command == 1) {
                if (load_file(file_path, &file_loaded)) {
                    printf("n/a\n");
                }
                printf("\n");
            } else if (command == 2) {
                if (!file_loaded || write_to_file(file_path)) {
                    printf("n/a\n");
                }
                printf("\n");
            } else {
                printf("n/a\n\n");
            }
        } else {
            printf("n/a\n");
            running = 0;
        }
    }

    return 0;
}


CC = gcc
CFLAGS = -Wall -Wextra -Werror
BUILD_DIR = ../build
TARGET = cipher
SRC = cipher.c

.PHONY: all clean cipher

all: cipher

cipher:
        @mkdir -p $(BUILD_DIR)
        $(CC) $(CFLAGS) $(SRC) -o $(BUILD_DIR)/$(TARGET)

clean:
        rm -rf $(BUILD_DIR)



#include <stdio.h>

#define MAX_PATH 256

int read_file(const char *path);

int main() {
    int command = 0;
    int finished = 0;
    int file_loaded = 0;
    char path[MAX_PATH];

    while (!finished) {
        if (scanf("%d", &command) != 1) {
            printf("n/a\n");
            finished = 1;
        } else if (command == 1) {
            if (scanf("%255s", path) == 1) {
                file_loaded = 1;
            } else {
                printf("n/a");
            }
            printf("\n");
        } else if (command == -1) {
            if (file_loaded) {
                if (read_file(path) != 0) {
                    printf("n/a");
                }
            } else {
                printf("n/a");
            }
            printf("\n");
            finished = 1;
        } else {
            printf("n/a\n");
        }
    }

    return 0;
}

int read_file(const char *path) {
    FILE *f = fopen(path, "r");
    int result = 1;

    if (f != NULL) {
        int ch = fgetc(f);
        if (ch != EOF) {
            putchar(ch);
            while ((ch = fgetc(f)) != EOF) {
                putchar(ch);
            }
            result = 0;
        }
        fclose(f);
    }

    return result;
}


CC = gcc
CFLAGS = -Wall -Wextra -Werror
BUILD_DIR = ../build
TARGET = cipher
SRC = cipher.c

.PHONY: all clean cipher

all: cipher

cipher:
	@mkdir -p $(BUILD_DIR)
	$(CC) $(CFLAGS) $(SRC) -o $(BUILD_DIR)/$(TARGET)

clean:
	rm -rf $(BUILD_DIR)



#include <stdio.h>

#define MAX_PATH 256

int read_and_print_file(const char *path);
int show_menu();

int main(void) {
    int code = 0;
    while (code != -1) {
        code = show_menu();
        if (code != -1) {
            printf("\n");
        }
    }
    return 0;
}

// выводит меню, обрабатывает ввод и вызывает обработку файла
int show_menu() {
    int result = 0;
    int code = 0;
    result = scanf("%d", &code);
    if (result != 1) {
        code = -1;
    }
    if (code == 1) {
        char path[MAX_PATH];
        result = scanf("%255s", path);
        if (result == 1) {
            if (read_and_print_file(path) != 0) {
                printf("n/a");
            }
        } else {
            printf("n/a");
        }
    } else if (code != -1) {
        printf("n/a");
    }
    return code;
}

// открывает и выводит содержимое файла
int read_and_print_file(const char *path) {
    FILE *fp = fopen(path, "r");
    int result = 1;
    if (fp != NULL) {
        int ch = fgetc(fp);
        if (ch == EOF) {
            result = 1;
        } else {
            result = 0;
            while (ch != EOF) {
                putchar(ch);
                ch = fgetc(fp);
            }
        }
        fclose(fp);
    }
    return result;
}




# <stdio.h>
#include <stdlib.h>
#include <string.h>

#define LEN_NUM 10

int is_operator_or_bracket(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^' || c == '(' || c == ')';
}

int is_operator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

int is_alpha(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}

int is_digit(char c) {
    return c >= '0' && c <= '9';
}

int is_func_or_x(const char* s) {
    return strcmp(s, "sin") == 0 || strcmp(s, "cos") == 0 || strcmp(s, "tan") == 0 ||
           strcmp(s, "sqrt") == 0 || strcmp(s, "ln") == 0 || strcmp(s, "exp") == 0 ||
           strcmp(s, "fabs") == 0 || strcmp(s, "x") == 0;
}

int lexer(char *string, char *tokens[], int *n) {
    int len = strlen(string), token = 0, pos = 0, balance = 0, ok = 1;
    char prev[LEN_NUM] = {0};

    while (pos < len && ok == 1) {
        if (string[pos] == ' ') {
            pos++;
        } else if (is_digit(string[pos])) {
            char num[LEN_NUM] = {0};
            int i = 0;
            while (is_digit(string[pos]) && i < LEN_NUM - 1) {
                num[i++] = string[pos++];
            }
            tokens[token] = malloc(strlen(num) + 1);
            strcpy(tokens[token++], num);
            strcpy(prev, num);
        } else if (is_alpha(string[pos])) {
            char name[LEN_NUM] = {0};
            int i = 0;
            while (is_alpha(string[pos]) && i < LEN_NUM - 1) {
                name[i++] = string[pos++];
            }
            if (is_func_or_x(name)) {
                tokens[token] = malloc(strlen(name) + 1);
                strcpy(tokens[token++], name);
                strcpy(prev, name);
            } else {
                ok = 0;
            }
        } else if (is_operator_or_bracket(string[pos])) {
            char curr = string[pos++];
            if ((curr == ')' && strcmp(prev, "(") == 0) || 
                (is_operator(curr) && is_operator(prev[0]))) {
                ok = 0;
            }
            if (curr == '(') balance++;
            if (curr == ')') balance--;
            if (balance < 0) ok = 0;
            tokens[token] = malloc(2);
            tokens[token][0] = curr;
            tokens[token++][1] = '\0';
            prev[0] = curr;
            prev[1] = '\0';
        } else {
            ok = 0;
        }
    }

    if (balance != 0 || is_operator(prev[0])) {
        ok = 0;
    }

    *n = token;
    return ok;
}

int main() {
    const char* expr = "x^2 + sqrt(x/6)";
    char* tokens[50] = {NULL};
    int num_tokens = 0;
    int result = lexer((char*)expr, tokens, &num_tokens);

    if (result == 1) {
        printf("Токены: [");
        for (int i = 0; i < num_tokens; i++) {
            printf("\"%s\"", tokens[i]);
            if (i < num_tokens - 1) printf(", ");
        }
        printf("]\n");
    } else {
        printf("Ошибка лексического анализа\n");
    }

    for (int i = 0; i < num_tokens; i++) {
        free(tokens[i]);
    }

    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define LEN_NUM 10

int is_operator_or_bracket(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^' || c == '(' || c == ')';
}

int is_operator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

int is_alpha(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}

int is_digit(char c) {
    return c >= '0' && c <= '9';
}

int is_func_or_x(const char* s) {
    return strcmp(s, "sin") == 0 || strcmp(s, "cos") == 0 || strcmp(s, "tan") == 0 ||
           strcmp(s, "sqrt") == 0 || strcmp(s, "ln") == 0 || strcmp(s, "exp") == 0 ||
           strcmp(s, "fabs") == 0 || strcmp(s, "x") == 0;
}

int lexer(char *string, char *tokens[], int *n) {
    int len = strlen(string), token = 0, pos = 0, balance = 0, ok = 1;
    char prev[LEN_NUM] = {0};

    while (pos < len && ok == 1) {
        if (string[pos] == ' ') {
            pos++;
        } else if (is_digit(string[pos])) {
            char num[LEN_NUM] = {0};
            int i = 0;
            while (is_digit(string[pos]) && i < LEN_NUM - 1) {
                num[i++] = string[pos++];
            }
            tokens[token] = malloc(strlen(num) + 1);
            strcpy(tokens[token++], num);
            strcpy(prev, num);
        } else if (is_alpha(string[pos])) {
            char name[LEN_NUM] = {0};
            int i = 0;
            while (is_alpha(string[pos]) && i < LEN_NUM - 1) {
                name[i++] = string[pos++];
            }
            if (is_func_or_x(name)) {
                tokens[token] = malloc(strlen(name) + 1);
                strcpy(tokens[token++], name);
                strcpy(prev, name);
            } else {
                ok = 0;
            }
        } else if (is_operator_or_bracket(string[pos])) {
            char curr = string[pos++];
            if ((curr == ')' && strcmp(prev, "(") == 0) || 
                (is_operator(curr) && is_operator(prev[0]))) {
                ok = 0;
            }
            if (curr == '(') balance++;
            if (curr == ')') balance--;
            if (balance < 0) ok = 0;
            tokens[token] = malloc(2);
            tokens[token][0] = curr;
            tokens[token++][1] = '\0';
            prev[0] = curr;
            prev[1] = '\0';
        } else {
            ok = 0;
        }
    }

    if (balance != 0 || is_operator(prev[0])) {
        ok = 0;
    }

    *n = token;
    return ok;
}

int main() {
    const char* expr = "x^2 + sqrt(x/6)";
    char* tokens[50] = {NULL};
    int num_tokens = 0;
    int result = lexer((char*)expr, tokens, &num_tokens);

    if (result == 1) {
        printf("Токены: [");
        for (int i = 0; i < num_tokens; i++) {
            printf("\"%s\"", tokens[i]);
            if (i < num_tokens - 1) printf(", ");
        }
        printf("]\n");
    } else {
        printf("Ошибка лексического анализа\n");
    }

    for (int i = 0; i < num_tokens; i++) {
        free(tokens[i]);
    }

    return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define LEN_NUM 10
#define MAX_TOKENS 100

int is_operator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

int is_bracket(char c) {
    return c == '(' || c == ')';
}

int is_operator_or_bracket(char c) {
    return is_operator(c) || is_bracket(c);
}

int is_alpha(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}

int is_digit(char c) {
    return (c >= '0' && c <= '9');
}

int is_func_or_x(const char* s) {
    return strcmp(s, "sin") == 0 || strcmp(s, "cos") == 0 || strcmp(s, "tan") == 0 ||
           strcmp(s, "sqrt") == 0 || strcmp(s, "ln") == 0 || strcmp(s, "exp") == 0 ||
           strcmp(s, "fabs") == 0 || strcmp(s, "x") == 0;
}

// проверка на допустимые символы (буквы, цифры, знаки, пробелы)
int is_valid_char(char c) {
    return is_digit(c) || is_alpha(c) || is_operator_or_bracket(c) || c == ' ';
}

int lexer(char *string, char *tokens[], int *n) {
    int len = strlen(string);
    int token = 0;
    int pos = 0;
    int flag = 1;
    int balance = 0; // баланс скобок
    char prev[LEN_NUM] = {0}; // предыдущий токен

    while (pos < len && flag) {
        char c = string[pos];

        if (!is_valid_char(c)) {
            // запрещённый символ
            flag = 0;
        } else if (c == ' ') {
            pos++;
        } else if (is_digit(c)) {
            char num[LEN_NUM] = {0};
            int i = 0;
            while (is_digit(string[pos]) && i < LEN_NUM - 1) {
                num[i++] = string[pos++];
            }
            tokens[token] = malloc(strlen(num) + 1);
            strcpy(tokens[token++], num);
            strcpy(prev, num);
        } else if (is_alpha(c)) {
            char func_or_x[LEN_NUM] = {0};
            int i = 0;
            while (is_alpha(string[pos]) && i < LEN_NUM - 1) {
                func_or_x[i++] = string[pos++];
            }
            if (is_func_or_x(func_or_x)) {
                tokens[token] = malloc(strlen(func_or_x) + 1);
                strcpy(tokens[token++], func_or_x);
                strcpy(prev, func_or_x);
            } else {
                flag = 0; // неизвестное слово
            }
        } else if (is_operator_or_bracket(c)) {
            // два оператора подряд (например ++, **, -/)
            if (is_operator(c) && (is_operator(prev[0]) || prev[0] == '\0')) {
                flag = 0;
            }

            // пустые скобки ()
            if (c == ')' && strcmp(prev, "(") == 0) {
                flag = 0;
            }

            // баланс скобок
            if (c == '(') balance++;
            if (c == ')') balance--;
            if (balance < 0) flag = 0;

            char temp[2] = {c, '\0'};
            tokens[token] = malloc(2);
            strcpy(tokens[token++], temp);
            strcpy(prev, temp);
            pos++;
        }
    }

    // финальная проверка
    if (balance != 0) flag = 0; // несбалансированные скобки
    if (is_operator(prev[0])) flag = 0; // выражение не должно заканчиваться оператором

    *n = token;
    return flag;
}

int main() {
    char input[256];
    printf("Введите выражение: ");
    if (fgets(input, sizeof(input), stdin) == NULL) {
        printf("Ошибка ввода\n");
        return 1;
    }

    // удалим символ новой строки, если есть
    input[strcspn(input, "\n")] = '\0';

    char* tokens[MAX_TOKENS] = {NULL};
    int num_tokens = 0;

    if (lexer(input, tokens, &num_tokens)) {
        printf("Токены: [");
        for (int i = 0; i < num_tokens; i++) {
            printf("\"%s\"", tokens[i]);
            if (i < num_tokens - 1) printf(", ");
        }
        printf("]\n");
    } else {
        printf("Ошибка лексического анализа\n");
    }

    for (int i = 0; i < num_tokens; i++) {
        free(tokens[i]);
    }

    return 0;
}






#include <stdio.h>
#include <math.h>

#define WIDTH 80
#define HEIGHT 25
#define CENTER_Y 12



double evaluate(double x) {
    return sin(x); //рандомно пока что. заменю на реальную функцию - которая будет принимать х и возвращать значение выражения введенного пользователем
}

void draw_graph() {
    char field[HEIGHT][WIDTH];
    int row, col;
    double x, y;

    row = 0;
    while (row < HEIGHT) {
        col = 0;
        while (col < WIDTH) {
            field[row][col] = '.';
            col++;
        }
        row++;
    }

    col = 0;
    while (col < WIDTH) {
     
        x = (4.0 * M_PI * col) / (WIDTH - 1);
        y = evaluate(x);

        if (!(y < -1.0 || y > 1.0)) {
            row = CENTER_Y - (int)(round(y * (HEIGHT / 2.0 - 1)));

            if (row >= 0 && row < HEIGHT) {
                field[row][col] = '*';
            }
        }

        col++;
    }

    row = 0;
    while (row < HEIGHT) {
        col = 0;
        while (col < WIDTH) {
            putchar(field[row][col]);
            col++;
        }
        putchar('\n');
        row++;
    }
}

int main () {
    draw_graph();
    return 0;
}
