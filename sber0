#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int read_number(int *n) {
    int res = scanf("%d", n);
    int ch;

    if (res != 1) {
        while ((ch = getchar()) != '\n' && ch != EOF);
    }

    return res == 1;
}

int show_file(const char *path, int *is_empty) {
    FILE *f = fopen(path, "r");
    int result = 0;
    int empty = 1;
    char ch;

    if (f != NULL) {
        while ((ch = fgetc(f)) != EOF) {
            putchar(ch);
            empty = 0;
        }
        fclose(f);
        result = 1;
    }

    if (is_empty != NULL) {
        *is_empty = empty;
    }

    return result;
}

int load_file(char *path) {
    int status = 0;
    int empty = 0;
    FILE *test = NULL;
    int ch;

    if (scanf("%255s", path) == 1) {
        test = fopen(path, "r");
        if (test != NULL) {
            fclose(test);
            if (show_file(path, &empty)) {
                status = 1;
                if (empty) {
                    printf("n/a");
                }
            }
        }
    } else {
        while ((ch = getchar()) != '\n' && ch != EOF);
    }

    return status;
}

int write_to_file(const char *path) {
    char line[MAX_LINE];
    int ch;
    int success = 0;
    int needs_newline = 0;

    while ((ch = getchar()) != '\n' && ch != EOF);

    if (fgets(line, MAX_LINE, stdin) != NULL) {
        size_t len = strlen(line);
        if (len > 0 && line[len - 1] == '\n') {
            line[len - 1] = '\0';
        }

        FILE *check = fopen(path, "r");
        if (check != NULL) {
            fseek(check, 0, SEEK_END);
            needs_newline = ftell(check) > 0;
            fclose(check);
        }

        FILE *f = fopen(path, "a");
        if (f != NULL) {
            if (needs_newline) {
                fprintf(f, "\n%s", line);
            } else {
                fprintf(f, "%s", line);
            }
            fclose(f);
            success = show_file(path, NULL);
        }
    }

    return success;
}

int main(void) {
    int command = 0;
    int file_loaded = 0;
    char filepath[MAX_PATH] = "";
    int run = 1;

    while (run) {
        if (!read_number(&command)) {
            printf("n/a\n");
        } else if (command == -1) {
            run = 0;
        } else if (command == 1) {
            if (load_file(filepath)) {
                file_loaded = 1;
                printf("\n");
            } else {
                printf("n/a\n");
                file_loaded = 0;
            }
        } else if (command == 2) {
            if (!file_loaded) {
                printf("n/a\n");
            } else {
                if (!write_to_file(filepath)) {
                    printf("n/a\n");
                } else {
                    printf("\n");
                }
            }
        } else {
            printf("n/a\n");
        }
    }

    return 0;
}



#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int read_command(int *command) {
    return scanf("%d", command) == 1;
}

int open_and_print_file(const char *path) {
    FILE *file = fopen(path, "r");
    int result = 1;

    if (file != NULL) {
        int empty = 1;
        char ch;
        while ((ch = fgetc(file)) != EOF) {
            putchar(ch);
            empty = 0;
        }
        fclose(file);
        if (!empty) {
            result = 0;
        }
    }

    return result;
}

int load_file(char *file_path, int *file_loaded) {
    int result = 1;
    if (scanf("%255s", file_path) == 1) {
        if (open_and_print_file(file_path) == 0) {
            *file_loaded = 1;
            result = 0;
        } else {
            *file_loaded = 0;
        }
    }
    return result;
}

int write_to_file(const char *path) {
    int result = 1;
    char line[MAX_LINE];

    scanf(" ");
    if (fgets(line, MAX_LINE, stdin)) {
        size_t len = strlen(line);
        if (len > 0 && line[len - 1] == '\n') {
            line[len - 1] = '\0';
        }

        FILE *file = fopen(path, "a");
        if (file != NULL) {
            fprintf(file, "\n%s", line);
            fclose(file);
            result = open_and_print_file(path);
        }
    }

    return result;
}

int main() {
    int running = 1;
    int command = 0;
    int file_loaded = 0;
    char file_path[MAX_PATH] = "";

    while (running) {
        if (read_command(&command)) {
            if (command == -1) {
                running = 0;
            } else if (command == 1) {
                if (load_file(file_path, &file_loaded)) {
                    printf("n/a\n");
                }
                printf("\n");
            } else if (command == 2) {
                if (!file_loaded || write_to_file(file_path)) {
                    printf("n/a\n");
                }
                printf("\n");
            } else {
                printf("n/a\n\n");
            }
        } else {
            printf("n/a\n");
            running = 0;
        }
    }

    return 0;
}



#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int read_number(int *n) {
    int res = scanf("%d", n);
    if (res != 1) {
        while (getchar() != '\n');
    }
    return res == 1;
}

int show_file(const char *path, int *is_empty) {
    FILE *f = fopen(path, "r");
    if (f == NULL) return 0;

    int empty = 1;
    char ch;
    while ((ch = fgetc(f)) != EOF) {
        putchar(ch);
        empty = 0;
    }
    fclose(f);

    if (is_empty != NULL) {
        *is_empty = empty;
    }

    return 1;
}

int load_file(char *path) {
    if (scanf("%255s", path) != 1) {
        while (getchar() != '\n');
        return 0;
    }

    // Сначала проверяем, существует ли файл
    FILE *test = fopen(path, "r");
    if (test == NULL) {
        return 0;
    }
    fclose(test);

    int empty = 0;
    if (!show_file(path, &empty)) return 0;
    
    if (empty) {
        printf("n/a");
    }
    
    return 1;
}

int write_to_file(const char *path) {
    char line[MAX_LINE];

    // очистка буфера от лишнего '\n' после scanf
    int ch;
    while ((ch = getchar()) != '\n' && ch != EOF) {}

    if (fgets(line, MAX_LINE, stdin) == NULL) return 0;

    size_t len = strlen(line);
    if (len > 0 && line[len - 1] == '\n') {
        line[len - 1] = '\0';
    }

    FILE *f = fopen(path, "a");
    if (f == NULL) return 0;

    // Проверяем, нужно ли добавлять перевод строки
    int needs_newline = 0;
    FILE *check = fopen(path, "r");
    if (check) {
        fseek(check, 0, SEEK_END);
        needs_newline = ftell(check) > 0;
        fclose(check);
    }

    if (needs_newline) {
        fprintf(f, "\n%s", line);
    } else {
        fprintf(f, "%s", line);
    }
    fclose(f);

    // Всегда выводим содержимое файла после записи
    return show_file(path, NULL);
}

int main(void) {
    int command = 0;
    int file_loaded = 0;
    char filepath[MAX_PATH] = "";
    int run = 1;

    while (run) {
        if (!read_number(&command)) {
            printf("n/a\n");
            continue;
        }

        if (command == -1) {
            run = 0;
        } else if (command == 1) {
            if (load_file(filepath)) {
                file_loaded = 1;
                printf("\n");
            } else {
                printf("n/a\n");
                file_loaded = 0;
            }
        } else if (command == 2) {
            if (!file_loaded) {
                printf("n/a\n");
            } else {
                if (!write_to_file(filepath)) {
                    printf("n/a\n");
                } else {
                    printf("\n");
                }
            }
        } else {
            printf("n/a\n");
        }
    }

    return 0;
}




#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int read_number(int *n) {
    int res = scanf("%d", n);
    if (res != 1) {
        while (getchar() != '\n');
    }
    return res == 1;
}

int show_file(const char *path, int *is_empty) {
    FILE *f = fopen(path, "r");
    if (f == NULL) return 0;

    int empty = 1;
    char ch;
    while ((ch = fgetc(f)) != EOF) {
        putchar(ch);
        empty = 0;
    }
    fclose(f);

    if (is_empty != NULL) {
        *is_empty = empty;
    }

    return 1;
}

int load_file(char *path) {
    if (scanf("%255s", path) != 1) {
        while (getchar() != '\n');
        return 0;
    }

    int empty = 0;
    if (!show_file(path, &empty)) return 0;
    
    if (empty) {
        printf("n/a\n");
    }
    
    return 1;
}

int write_to_file(const char *path) {
    char line[MAX_LINE];

    // очистка буфера от лишнего '\n' после scanf
    int ch;
    while ((ch = getchar()) != '\n' && ch != EOF) {}

    if (fgets(line, MAX_LINE, stdin) == NULL) return 0;

    size_t len = strlen(line);
    if (len > 0 && line[len - 1] == '\n') {
        line[len - 1] = '\0';
    }

    FILE *f = fopen(path, "a");
    if (f == NULL) return 0;

    // Проверяем, нужно ли добавлять перевод строки
    int needs_newline = 0;
    FILE *check = fopen(path, "r");
    if (check) {
        fseek(check, 0, SEEK_END);
        needs_newline = ftell(check) > 0;
        fclose(check);
    }

    if (needs_newline) {
        fprintf(f, "\n%s", line);
    } else {
        fprintf(f, "%s", line);
    }
    fclose(f);

    // Всегда выводим содержимое файла после записи
    return show_file(path, NULL);
}

int main(void) {
    int command = 0;
    int file_loaded = 0;
    char filepath[MAX_PATH] = "";
    int run = 1;

    while (run) {
        if (!read_number(&command)) {
            printf("n/a\n\n");
            continue;
        }

        if (command == -1) {
            run = 0;
        } else if (command == 1) {
            file_loaded = load_file(filepath);
            printf("\n");
        } else if (command == 2) {
            if (!file_loaded) {
                printf("n/a\n");
            } else {
                if (!write_to_file(filepath)) {
                    printf("n/a\n");
                }
            }
            printf("\n");
        } else {
            printf("n/a\n\n");
        }
    }

    return 0;
}


#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int read_number(int *n) {
    int res = scanf("%d", n);
    // Очищаем буфер ввода при ошибке чтения
    if (res != 1) {
        while (getchar() != '\n');
    }
    return res == 1;
}

int show_file(const char *path, int *is_empty) {
    FILE *f = fopen(path, "r");
    if (f == NULL) return 0;

    int empty = 1;
    char ch;
    while ((ch = fgetc(f)) != EOF) {
        putchar(ch);
        empty = 0;
    }
    fclose(f);

    if (is_empty != NULL) {
        *is_empty = empty;
    }

    return 1;
}

int load_file(char *path) {
    if (scanf("%255s", path) != 1) {
        while (getchar() != '\n'); // Очищаем буфер
        return 0;
    }

    int empty = 0;
    if (!show_file(path, &empty)) return 0;
    
    // Файл считается загруженным, даже если он пустой
    return 1;
}

int write_to_file(const char *path) {
    char line[MAX_LINE];

    // очистка буфера от лишнего '\n' после scanf
    int ch;
    while ((ch = getchar()) != '\n' && ch != EOF) {}

    if (fgets(line, MAX_LINE, stdin) == NULL) return 0;

    size_t len = strlen(line);
    if (len > 0 && line[len - 1] == '\n') {
        line[len - 1] = '\0';
    }

    FILE *f = fopen(path, "a");
    if (f == NULL) return 0;

    // Проверяем, нужно ли добавлять перевод строки перед записью
    FILE *check = fopen(path, "r");
    if (check) {
        fseek(check, 0, SEEK_END);
        if (ftell(check) > 0) {
            fprintf(f, "\n");
        }
        fclose(check);
    }

    fprintf(f, "%s", line);
    fclose(f);

    // вывод обновлённого содержимого файла
    return show_file(path, NULL);
}

int main(void) {
    int command = 0;
    int file_loaded = 0;
    char filepath[MAX_PATH] = "";
    int run = 1;

    while (run) {
        if (!read_number(&command)) {
            printf("n/a\n\n");
            continue;
        }

        if (command == -1) {
            run = 0;
        } else if (command == 1) {
            file_loaded = load_file(filepath);
            if (!file_loaded) {
                printf("n/a\n");
            }
            printf("\n");
        } else if (command == 2) {
            if (!file_loaded) {
                printf("n/a\n");
            } else {
                if (!write_to_file(filepath)) {
                    printf("n/a\n");
                }
            }
            printf("\n");
        } else {
            printf("n/a\n\n");
        }
    }

    return 0;
}


#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int read_number(int *n) {
    return scanf("%d", n) == 1;
}

int show_file(const char *path, int *is_empty) {
    FILE *f = fopen(path, "r");
    if (f == NULL) return 0;

    int empty = 1;
    char ch;
    while ((ch = fgetc(f)) != EOF) {
        putchar(ch);
        empty = 0;
    }
    fclose(f);

    if (is_empty != NULL) {
        *is_empty = empty;
    }

    return 1;
}

int load_file(char *path) {
    if (scanf("%255s", path) != 1) return 0;

    int empty = 0;
    if (!show_file(path, &empty)) return 0;
    if (empty) return 0;

    return 1;
}

int write_to_file(const char *path) {
    char line[MAX_LINE];

    // очистка буфера от лишнего '\n' после scanf
    int ch;
    while ((ch = getchar()) != '\n' && ch != EOF) {}

    if (fgets(line, MAX_LINE, stdin) == NULL) return 0;

    size_t len = strlen(line);
    if (len > 0 && line[len - 1] == '\n') {
        line[len - 1] = '\0';
    }

    FILE *f = fopen(path, "a");
    if (f == NULL) return 0;

    fprintf(f, "%s\n", line);
    fclose(f);

    // вывод обновлённого содержимого файла
    int empty = 0;
    if (!show_file(path, &empty)) return 0;

    return 1;
}

int main(void) {
    int command = 0;
    int file_loaded = 0;
    char filepath[MAX_PATH] = "";
    int run = 1;

    while (run) {
        if (!read_number(&command)) {
            printf("n/a\n");
        } else if (command == -1) {
            run = 0;
        } else if (command == 1) {
            if (load_file(filepath)) {
                file_loaded = 1;
            } else {
                printf("n/a\n");
                file_loaded = 0;
            }
            printf("\n");
        } else if (command == 2) {
            if (!file_loaded || !write_to_file(filepath)) {
                printf("n/a\n");
            }
            printf("\n");
        } else {
            printf("n/a\n");
        }
    }

    return 0;
}


#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int read_number(int *n) {
    return scanf("%d", n) == 1;
}

int show_file(const char *path, int *is_empty) {
    FILE *f = fopen(path, "r");
    if (f == NULL) return 0;

    int empty = 1;
    char ch;
    while ((ch = fgetc(f)) != EOF) {
        putchar(ch);
        empty = 0;
    }
    fclose(f);

    if (is_empty != NULL) {
        *is_empty = empty;
    }

    return 1;
}

int load_file(char *path) {
    if (scanf("%255s", path) != 1) return 0;

    int empty = 0;
    if (!show_file(path, &empty)) return 0;
    if (empty) return 0;

    return 1;
}

int write_to_file(const char *path) {
    char line[MAX_LINE];

    // очистка буфера от лишнего '\n' после scanf
    int ch;
    while ((ch = getchar()) != '\n' && ch != EOF) {}

    if (fgets(line, MAX_LINE, stdin) == NULL) return 0;

    size_t len = strlen(line);
    if (len > 0 && line[len - 1] == '\n') {
        line[len - 1] = '\0';
    }

    FILE *f = fopen(path, "a");
    if (f == NULL) return 0;

    fprintf(f, "%s\n", line);
    fclose(f);

    // вывод обновлённого содержимого файла
    int empty = 0;
    if (!show_file(path, &empty)) return 0;

    return 1;
}

int main(void) {
    int command = 0;
    int file_loaded = 0;
    char filepath[MAX_PATH] = "";
    int run = 1;

    while (run) {
        if (!read_number(&command)) {
            printf("n/a\n");
        } else if (command == -1) {
            run = 0;
        } else if (command == 1) {
            if (load_file(filepath)) {
                file_loaded = 1;
            } else {
                printf("n/a\n");
                file_loaded = 0;
            }
            printf("\n");
        } else if (command == 2) {
            if (!file_loaded || !write_to_file(filepath)) {
                printf("n/a\n");
            }
            printf("\n");
        } else {
            printf("n/a\n");
        }
    }

    return 0;
}



int write_to_file(const char *path) {
    char line[MAX_LINE];
    int result = 0;

    int ch;
    while ((ch = getchar()) != '\n' && ch != EOF) {
        // очищаем буфер до новой строки
    }

    if (fgets(line, MAX_LINE, stdin) != NULL) {
        size_t len = strlen(line);
        if (len > 0 && line[len - 1] == '\n') {
            line[len - 1] = '\0';
        }

        FILE *f = fopen(path, "a");
        if (f != NULL) {
            fprintf(f, "\n%s", line);
            fclose(f);
            result = 1;
        }
    }

    return result;
}



#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int input_number(int *n) {
    int result = scanf("%d", n);
    return result == 1;
}

int read_file(const char *path) {
    FILE *file = fopen(path, "r");
    int empty = 1;
    int result = 0;
    char ch;

    if (file != NULL) {
        while ((ch = fgetc(file)) != EOF) {
            putchar(ch);
            empty = 0;
        }
        fclose(file);
        if (empty == 0) {
            result = 1;
        } else {
            result = 2;
        }
    }

    return result;
}

int load_file(char *path) {
    int result = 0;
    if (scanf("%255s", path) == 1) {
        int read_result = read_file(path);
        if (read_result == 1) {
            result = 1;
        } else {
            result = 0;
        }
    }
    return result;
}

int write_to_file(const char *path) {
    char line[MAX_LINE];
    int result = 0;
    FILE *f = NULL;

    if (scanf(" ") == 0 || fgets(line, MAX_LINE, stdin) == NULL) {
        result = 0;
    } else {
        size_t len = strlen(line);
        if (len > 0 && line[len - 1] == '\n') {
            line[len - 1] = '\0';
        }
        f = fopen(path, "a");
        if (f != NULL) {
            fprintf(f, "\n%s", line);
            fclose(f);
            result = 1;
        }
    }

    return result;
}

int main(void) {
    int choice = 0;
    int loaded = 0;
    int running = 1;
    char path[MAX_PATH] = "";

    while (running == 1) {
        if (input_number(&choice) == 0) {
            printf("n/a\n");
            running = 0;
        } else {
            if (choice == -1) {
                running = 0;
            }

            if (choice == 1 && running == 1) {
                if (load_file(path) == 1) {
                    loaded = 1;
                } else {
                    printf("n/a\n");
                    loaded = 0;
                }
                printf("\n");
            }

            if (choice == 2 && running == 1) {
                if (loaded == 1 && write_to_file(path) == 1) {
                    int read_result = read_file(path);
                    if (read_result == 1) {
                        printf("\n");
                    } else {
                        printf("n/a\n\n");
                    }
                } else {
                    printf("n/a\n\n");
                }
            }
        }
    }

    return 0;
}


#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int input_number(int *n) {
    int result = scanf("%d", n);
    return result == 1;
}

int read_file(const char *path) {
    FILE *file = fopen(path, "r");
    int empty = 1;
    int result = 0;
    char ch;

    if (file != NULL) {
        while ((ch = fgetc(file)) != EOF) {
            putchar(ch);
            empty = 0;
        }
        fclose(file);
        if (empty == 0) {
            result = 1;
        } else {
            result = 2;
        }
    }

    return result;
}

int load_file(char *path) {
    int result = 0;
    if (scanf("%255s", path) == 1) {
        int read_result = read_file(path);
        if (read_result == 1) {
            result = 1;
        } else {
            result = 0;
        }
    }
    return result;
}

int write_to_file(const char *path) {
    char line[MAX_LINE];
    int result = 0;
    FILE *f = NULL;

    if (scanf(" ") == 0 || fgets(line, MAX_LINE, stdin) == NULL) {
        result = 0;
    } else {
        size_t len = strlen(line);
        if (len > 0 && line[len - 1] == '\n') {
            line[len - 1] = '\0';
        }
        f = fopen(path, "a");
        if (f != NULL) {
            fprintf(f, "\n%s", line);
            fclose(f);
            result = 1;
        }
    }

    return result;
}

int main(void) {
    int choice = 0;
    int loaded = 0;
    int running = 1;
    char path[MAX_PATH] = "";

    while (running == 1) {
        if (input_number(&choice) == 0) {
            printf("n/a\n");
            running = 0;
        } else {
            if (choice == -1) {
                running = 0;
            }

            if (choice == 1 && running == 1) {
                if (load_file(path) == 1) {
                    loaded = 1;
                } else {
                    printf("n/a\n");
                    loaded = 0;
                }
                printf("\n");
            }

            if (choice == 2 && running == 1) {
                if (loaded == 1 && write_to_file(path) == 1) {
                    int read_result = read_file(path);
                    if (read_result == 1) {
                        printf("\n");
                    } else {
                        printf("n/a\n\n");
                    }
                } else {
                    printf("n/a\n\n");
                }
            }
        }
    }

    return 0;
}




#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int read_file(const char *path) {
    FILE *f = fopen(path, "r");
    int ch = 0;
    int is_empty = 1;
    if (f != NULL) {
        while ((ch = fgetc(f)) != EOF) {
            putchar(ch);
            is_empty = 0;
        }
        fclose(f);
        if (is_empty == 1) return 2;
        return 1;
    }
    return 0;
}

int load_file(char *path) {
    int res = 0;
    if (scanf("%255s", path) == 1) {
        res = read_file(path);
    }
    return res;
}

int write_to_file(const char *path) {
    char line[MAX_LINE];
    int result = 0;
    FILE *f = NULL;
    if (scanf(" ") == 0 || fgets(line, MAX_LINE, stdin) == NULL) {
        result = 0;
    } else {
        size_t len = strlen(line);
        if (len > 0 && line[len - 1] == '\n') {
            line[len - 1] = '\0';
        }
        f = fopen(path, "a");
        if (f != NULL) {
            fprintf(f, "\n%s", line);
            fclose(f);
            if (read_file(path) != 0) {
                result = 1;
            }
        }
    }
    return result;
}

int read_choice(int *n) {
    return scanf("%d", n) == 1;
}

int main() {
    int running = 1;
    int loaded = 0;
    int choice = 0;
    char path[MAX_PATH] = "";

    while (running == 1) {
        if (read_choice(&choice) == 0) {
            printf("n/a\n");
            running = 0;
        }
        if (choice == -1) {
            running = 0;
        }
        if (choice == 1) {
            int status = load_file(path);
            if (status == 1) {
                loaded = 1;
            }
            if (status == 2) {
                printf("n/a\n");
                loaded = 1;
            }
            if (status == 0) {
                printf("n/a\n");
                loaded = 0;
            }
            printf("\n");
        }
        if (choice == 2 && running == 1) {
            if (loaded == 1 && write_to_file(path) == 1) {
                printf("\n");
            } else {
                printf("n/a\n\n");
            }
        }
    }

    return 0;
}




// src/cipher.c

#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int read_choice(int *n) {
    int res = scanf("%d", n);
    return res == 1;
}

int read_path(char *path) {
    return scanf("%255s", path) == 1;
}

int print_file(const char *path) {
    FILE *f = fopen(path, "r");
    if (f == NULL) return 0;

    int empty = 1;
    char ch;
    while ((ch = fgetc(f)) != EOF) {
        putchar(ch);
        empty = 0;
    }

    fclose(f);
    return !empty;
}

int append_to_file(const char *path) {
    char line[MAX_LINE];

    int ch;
    while ((ch = getchar()) != '\n' && ch != EOF) {} // очистка stdin

    if (fgets(line, MAX_LINE, stdin) == NULL) return 0;

    size_t len = strlen(line);
    if (len > 0 && line[len - 1] == '\n') line[len - 1] = '\0';

    FILE *f = fopen(path, "a");
    if (f == NULL) return 0;

    fprintf(f, "\n%s", line);
    fclose(f);

    return print_file(path);
}

int main(void) {
    int running = 1;
    int loaded = 0;
    char path[MAX_PATH] = "";

    while (running) {
        int choice = 0;
        if (!read_choice(&choice)) {
            printf("n/a\n");
            continue;
        }

        if (choice == -1) {
            running = 0;
        } else if (choice == 1) {
            if (read_path(path)) {
                loaded = print_file(path);
                if (!loaded) printf("n/a\n");
            } else {
                printf("n/a\n");
            }
            printf("\n");
        } else if (choice == 2) {
            if (loaded) {
                if (!append_to_file(path)) {
                    printf("n/a\n");
                }
            } else {
                printf("n/a\n");
            }
            printf("\n");
        } else {
            printf("n/a\n");
        }
    }

    return 0;
}


#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int vybor(int *n) {
    int res = 0;
    if (scanf("%d", n) == 1) {
        res = 1;
    }
    return res;
}

int file(const char *path) {
    int result = 0;
    FILE *f = fopen(path, "r");
    if (f != NULL) {
        int pust = 1;
        char ch;
        while ((ch = fgetc(f)) != EOF) {
            putchar(ch);
            pust = 0;
        }
        fclose(f);
        if (!pust) {
            result = 1;
        }
    }
    return result;
}

int load_file(char *path) {
    int result = 0;
    if (scanf("%255s", path) == 1) {
        result = file(path);
    }
    return result;
}

int write(const char *path) {
    int result = 0;
    char line[MAX_LINE];
    scanf(" ");  // захватываем пробел перед строкой
    if (fgets(line, MAX_LINE, stdin)) {
        size_t len = strlen(line);
        if (len > 0 && line[len - 1] == '\n') {
            line[len - 1] = '\0';
        }
        FILE *f = fopen(path, "a");
        if (f != NULL) {
            fprintf(f, "\n%s", line);
            fclose(f);
            result = file(path);
        }
    }
    return result;
}

int main() {
    int n = 0;
    int loaded = 0;
    int running = 1;
    char path[MAX_PATH] = "";

    while (running) {
        if (!vybor(&n)) {
            printf("n/a\n");
            running = 0;
        } else {
            if (n == -1) {
                running = 0;
            } else {
                if (n == 1) {
                    if (load_file(path)) {
                        loaded = 1;
                    } else {
                        printf("n/a\n");
                        loaded = 0;
                    }
                    printf("\n");
                }
                if (n == 2) {
                    if (!loaded || !write(path)) {
                        printf("n/a\n");
                    }
                    printf("\n");
                }
            }
        }
    }

    return 0;
}





#include <stdio.h>
#include <string.h>

#define MAX_PATH 256
#define MAX_LINE 1024

int vybor(int *n) {
    return scanf("%d", n) == 1;
}

int file(const char *path) {
    FILE *f = fopen(path, "r");
    if (f == NULL) return 0;

    int pust = 1;
    char ch;
    while ((ch = fgetc(f)) != EOF) {
        putchar(ch);
        pust = 0;
    }
    fclose(f);
    return !pustf;
}

int load_file(char *path) {
    if (scanf("%255s", path) != 1) return 0;
    return file(path);
}

int write(const char *path) {
    char line[MAX_LINE];
    scanf(" ");
    if (!fgets(line, MAX_LINE, stdin)) return 0;

    size_t len = strlen(line);
    if (len > 0 && line[len - 1] == '\n') {
        line[len - 1] = '\0';
    }

    FILE *f = fopen(path, "a");
    if (f == NULL) return 0;

    fprintf(f, "\n%s", line);
    fclose(f);
    return file(path);
}

int main() {
    int n = 0;
    int loaded = 0;
    char path[MAX_PATH] = "";
    int running = 1;

    while (running) {
        if (!vybor(&n)) {
            printf("n/a\n");
            return 0;
        }

        if (n == -1) return 0;

        if (n == 1) {
            if (load_file(path)) {
                loaded = 1;
            } else {
                printf("n/a\n");
                loaded = 0;
            }
            printf("\n");
        }

        if (n == 2) {
            if (!loaded || !write(path)) {
                printf("n/a\n");
            }
            printf("\n");
        }
    }

    return 0;
}
