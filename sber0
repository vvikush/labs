#include "s21_string.h"

#include <stdio.h>
#include <stdlib.h>

unsigned long s21_strlen(const char *str);
void test(const char *proveryaem, unsigned long ozhidaem) {
    unsigned long result = s21_strlen(proveryaem);

    if (result == ozhidaem) {
        printf("SUCCESS\n");

    } else {
        printf("FAIL\n");
    }
}

#ifdef RUN_STRLEN
void s21_strlen_test() {
    test("school", 6);

    test("", 0);

    test("nviarubvruipbauvapriuabvarg", 27);

    test("school sber", 11);

    test(NULL, 0);

    test("sber/nschool", 13);

    test("school\tsber", 12);
}
#endif

int s21_strcmp(const char *str1, const char *str2);
void test_strcmp(const char *str1, const char *str2, int ozhidaem) {
    int result = s21_strcmp(str1, str2);
    if ((result == 0 && ozhidaem == 0) || (result < 0 && ozhidaem < 0) || (result > 0 && ozhidaem > 0)) {
        printf("SUCCESS\n");
    } else {
        printf("FAIL\n");
    }
}

#ifdef RUN_STRCMP
void s21_strcmp_test() {
    test_strcmp("abc", "abc", 0);
    test_strcmp("abc", "abc", -1);
    test_strcmp("abc", "abd", -1);
    test_strcmp("abd", "abc", 1);
    test_strcmp("", "abc", -1);
    test_strcmp("", "", 0);
    test_strcmp(NULL, "abc", -1);
    test_strcmp("abc", NULL, 1);
    test_strcmp(NULL, NULL, 0);
    test_strcmp(NULL, NULL, 1);
}
#endif

char *s21_strcpy(char *dest, const char *src);
void test_strcpy(const char *src, const char *ozhidaem) {
    char buffer[100];
    char *result = s21_strcpy(buffer, src);

    int ok = 1;
    for (int i = 0; ozhidaem[i] != '\0' || result[i] != '\0'; i++) {
        if (ozhidaem[i] != result[i]) {
            ok = 0;
        }
    }

    if (ok) {
        printf("SUCCESS\n");
    } else {
        printf("FAIL\n");
    }
}
#ifdef RUN_STRCPY
void s21_strcpy_test() {
    test_strcpy("hello", "hell");
    test_strcpy("", "");
    test_strcpy("123 456", "123 456");
    test_strcpy("a", "a");
    test_strcpy("testing!", "testing!");
}
#endif

char *s21_strcat(char *dest, const char *src);
void test_strcat(const char *base, const char *add, const char *ozhidaem) {
    char buffer[200];

    s21_strcpy(buffer, base);
    char *result = s21_strcat(buffer, add);
    int ok = 1;
    for (int i = 0; ozhidaem[i] != '\0' || result[i] != '\0'; i++) {
        if (ozhidaem[i] != result[i]) {
            ok = 0;
        }
    }

    if (ok) {
        printf("SUCCESS\n");
    } else {
        printf("FAIL\n");
    }
}
#ifdef RUN_STRCAT
void s21_strcat_test() {
    test_strcat("", "sber", "sber");
    test_strcat("school", "", "school");
    test_strcat("", "", "");
    test_strcat("sber", "school", "sberschool");
    test_strcat("x", "y", "xy");
    test_strcat("sber", "school", "sber_school");
}
#endif
char *s21_strchr(const char *str, int c);
void test_strchr(const char *str, int c, int ozhidaemiy_index) {
    char *result = s21_strchr(str, c);
    int actual_index = -1;

    if (result != NULL && str != NULL) {
        actual_index = result - str;
    }

    if (actual_index == ozhidaemiy_index) {
        printf("SUCCESS\n");
    } else {
        printf("FAIL\n");
    }
}
#ifdef RUN_STRCHR
void s21_strchr_test() {
    test_strchr("sber", 'e', 2);
    test_strchr("school", 'z', -1);
    test_strchr("", 'a', -1);
    test_strchr("edge\0test", '\0', 4);
    test_strchr(NULL, 'a', -1);
    test_strchr("mistake", 's', 3);
}
#endif

int main() {
#ifdef RUN_STRLEN
    printf("strlen test:\n");
    s21_strlen_test();
#endif
#ifdef RUN_STRCMP
    printf("strcmp test:\n");
    s21_strcmp_test();
#endif
#ifdef RUN_STRCPY
    printf("strcpy test:\n");
    s21_strcpy_test();
#endif
#ifdef RUN_STRCAT
    printf("strcat test:\n");
    s21_strcat_test();
#endif
#ifdef RUN_STRCHR
    printf("strchr test:\n");
    s21_strchr_test();
#endif
    return 0;
}


#ifdef S21_STRING_H
#define S21_STRING_H

#include <stdio.h>
#include <stdlib.h>

unsigned long s21_strlen(const char *str);
int s21_strcmp(const char *str1, const char *str2);
char *s21_strcpy(char *dest, const char *src);
char *s21_strcat(char *dest, const char *src);
char *s21_strchr(const char *str, int c);

#endif


#include "s21_string.h"

#include <stdio.h>
#include <stdlib.h>

unsigned long s21_strlen(const char *str) {
    unsigned long length = 0;

    if (str != NULL) {
        while (str[length] != '\0') {
            length++;
        }
    }
    return length;
}

int s21_strcmp(const char *str1, const char *str2) {
    int result = 0;
    int flag = 0;

    if (str1 == NULL && str2 == NULL) {
        result = 0;
        flag = 1;
    }

    if (!flag && str1 == NULL) {
        result = -1;
        flag = 1;
    }

    if (!flag && str2 == NULL) {
        result = 1;
        flag = 1;
    }

    while (!flag && *str1 != '\0' && *str2 != '\0') {
        if (*str1 != *str2) {
            result = (*str1 > *str2) ? 1 : -1;
            flag = 1;
        } else {
            str1++;
            str2++;
        }
    }

    if (!flag && *str1 != *str2) {
        result = (*str1 > *str2) ? 1 : -1;
    }

    return result;
}

char *s21_strcpy(char *dest, const char *src) {
    char *orig = dest;

    if (dest != NULL && src != NULL) {
        while (*src != '\0') {
            *dest = *src;
            dest++;
            src++;
        }
        *dest = '\0';
    }

    return orig;
}

char *s21_strcat(char *dest, const char *src) {
    char *orig = dest;

    if (dest != NULL && src != NULL) {
        while (*dest != '\0') {
            dest++;
        }

        while (*src != '\0') {
            *dest = *src;
            dest++;
            src++;
        }

        *dest = '\0';
    }

    return orig;
}

char *s21_strchr(const char *str, int c) {
    char *result = NULL;

    if (str != NULL) {
        int flag = 0;

        while (*str != '\0' && !flag) {
            if (*str == (char)c) {
                result = (char *)str;
                flag = 1;
            } else {
                str++;
            }
        }

        if (!flag && c == '\0') {
            result = (char *)str;
        }
    }

    return result;
}
















#include <stdio.h>
#include <math.h>

#define WIDTH 80
#define HEIGHT 25
#define CENTER_Y 12



double evaluate(double x) {
    return sin(x); //рандомно пока что. заменю на реальную функцию - которая будет принимать х и возвращать значение выражения введенного пользователем
}

void draw_graph() {
    char field[HEIGHT][WIDTH];
    int row, col;
    double x, y;

    row = 0;
    while (row < HEIGHT) {
        col = 0;
        while (col < WIDTH) {
            field[row][col] = '.';
            col++;
        }
        row++;
    }

    col = 0;
    while (col < WIDTH) {
     
        x = (4.0 * M_PI * col) / (WIDTH - 1);
        y = evaluate(x);

        if (!(y < -1.0 || y > 1.0)) {
            row = CENTER_Y - (int)(round(y * (HEIGHT / 2.0 - 1)));

            if (row >= 0 && row < HEIGHT) {
                field[row][col] = '*';
            }
        }

        col++;
    }

    row = 0;
    while (row < HEIGHT) {
        col = 0;
        while (col < WIDTH) {
            putchar(field[row][col]);
            col++;
        }
        putchar('\n');
        row++;
    }
}

int main () {
    draw_graph();
    return 0;
}
