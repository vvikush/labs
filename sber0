char *s21_strcat(char *dest, const char *src) {
    char *original = dest;

    if (dest != NULL && src != NULL) {
        while (*dest != '\0') {
            dest++;
        }

        while (*src != '\0') {
            *dest = *src;
            dest++;
            src++;
        }

        *dest = '\0';
    }

    return original;
}
з


void test_strcpy(const char *src, const char *expected) {
    char buffer[100];  // достаточный буфер
    char *result = s21_strcpy(buffer, src);

    int ok = 1;
    for (int i = 0; expected[i] != '\0' || result[i] != '\0'; i++) {
        if (expected[i] != result[i]) {
            ok = 0;
        }
    }

    if (ok) {
        printf("strcpy test: SUCCESS\n");
    } else {
        printf("strcpy test: FAIL (got: \"%s\", expected: \"%s\")\n", result, expected);
    }
}

void s21_strcpy_test() {
    test_strcpy("hello", "hello");
    test_strcpy("", "");
    test_strcpy("123 456", "123 456");
    test_strcpy("a", "a");
    test_strcpy("testing edge case!", "testing edge case!");
}



char *s21_strcpy(char *dest, const char *src) {
    char *original = dest;

    if (dest != NULL && src != NULL) {
        while (*src != '\0') {
            *dest = *src;
            dest++;
            src++;
        }
        *dest = '\0';
    }

    return original;
}



#include "s21_string.h"
#include <stdio.h>
#include <stdlib.h>

// тестовая обёртка для strlen
void test_strlen(const char *input, unsigned long expected) {
    unsigned long result = s21_strlen(input);
    if (result == expected) {
        printf("strlen test: SUCCESS\n");
    } else {
        printf("strlen test: FAIL (expected %lu, got %lu)\n", expected, result);
    }
}

void s21_strlen_test() {
    test_strlen("school", 6);
    test_strlen("", 0);
    test_strlen("nyiarubvruipbuavapriuabvarg", 27);
    test_strlen("school sber", 11);
    test_strlen(NULL, 0);
}

// тестовая обёртка для strcmp
void test_strcmp(const char *str1, const char *str2, int expected) {
    int result = s21_strcmp(str1, str2);
    if ((result == 0 && expected == 0) ||
        (result < 0 && expected < 0) ||
        (result > 0 && expected > 0)) {
        printf("strcmp test: SUCCESS\n");
    } else {
        printf("strcmp test: FAIL (expected %d, got %d)\n", expected, result);
    }
}

void s21_strcmp_test() {
    test_strcmp("abc", "abc", 0);
    test_strcmp("abc", "abd", -1);
    test_strcmp("abd", "abc", 1);
    test_strcmp("", "abc", -1);
    test_strcmp("", "", 0);
    test_strcmp(NULL, "abc", -1);
    test_strcmp("abc", NULL, 1);
    test_strcmp(NULL, NULL, 0);
}

int main() {
    s21_strlen_test();
    s21_strcmp_test();
    return 0;
}



void s21_strcmp_test() {
    // одинаковые строки
    if (s21_strcmp("abc", "abc") == 0) {
        printf("strcmp test 1: SUCCESS\n");
    } else {
        printf("strcmp test 1: FAIL\n");
    }

    // str1 < str2
    if (s21_strcmp("abc", "abd") < 0) {
        printf("strcmp test 2: SUCCESS\n");
    } else {
        printf("strcmp test 2: FAIL\n");
    }

    // str1 > str2
    if (s21_strcmp("abd", "abc") > 0) {
        printf("strcmp test 3: SUCCESS\n");
    } else {
        printf("strcmp test 3: FAIL\n");
    }

    // краевой случай: одна строка пустая
    if (s21_strcmp("", "abc") < 0) {
        printf("strcmp test 4: SUCCESS\n");
    } else {
        printf("strcmp test 4: FAIL\n");
    }

    // обе пустые
    if (s21_strcmp("", "") == 0) {
        printf("strcmp test 5: SUCCESS\n");
    } else {
        printf("strcmp test 5: FAIL\n");
    }

    // сравнение с NULL (краевой случай)
    if (s21_strcmp(NULL, "abc") < 0) {
        printf("strcmp test 6: SUCCESS\n");
    } else {
        printf("strcmp test 6: FAIL\n");
    }
}



int s21_strcmp(const char *str1, const char *str2) {
    int result = 0;

    int null_case = 0;

    if (str1 == NULL && str2 == NULL) {
        result = 0;
        null_case = 1;
    }

    if (!null_case && str1 == NULL) {
        result = -1;
        null_case = 1;
    }

    if (!null_case && str2 == NULL) {
        result = 1;
        null_case = 1;
    }

    while (!null_case && *str1 != '\0' && *str2 != '\0') {
        if (*str1 != *str2) {
            result = (*str1 > *str2) ? 1 : -1;
            null_case = 1;
        }
        str1++;
        str2++;
    }

    if (!null_case && *str1 != *str2) {
        result = (*str1 > *str2) ? 1 : -1;
    }

    return result;
}



CC = gcc
CFLAGS = -Wall -Werror -Wextra -std=c11
SRC = src/s21_string.c src/s21_string_test.c
OUT_DIR = build
OUT = $(OUT_DIR)/Quest_1

strlen_tests: $(SRC)
	mkdir -p $(OUT_DIR)
	$(CC) $(CFLAGS) $(SRC) -o $(OUT)

clean:
	rm -rf $(OUT_DIR)
