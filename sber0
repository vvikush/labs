/*------------------------------------
	Здравствуй, человек!
	Чтобы получить ключ 
	поработай с комментариями.
-------------------------------------*/
#include <stdio.h>

#define MAX_SIZE 10

void input(int *buffer, int *length);
void output(int *buffer, int length);
int sum_numbers(int *buffer, int length);
int find_numbers(int *buffer, int length, int number, int *numbers);

/*------------------------------------
	Функция получает массив данных 
	через stdin.
	Выдает в stdout особую сумму
	и сформированный массив 
	специальных элементов
	(выбранных с помощью найденной суммы):
	это и будет частью ключа
-------------------------------------*/
int main(void) {
    int buffer[MAX_SIZE];
    int filtered[MAX_SIZE];
    int length, sum, count;

    input(buffer, &length);

    sum = sum_numbers(buffer, length);

    if (sum <= 0) {
        printf("n/a\n");
    } else {
        count = find_numbers(buffer, length, sum, filtered);
        if (count > 0) {
            printf("%d\n", sum);
            output(filtered, count);
        } else {
            printf("n/a\n");
        }
    }

    return 0;
}

/*------------------------------------
	Функция должна находить
	сумму четных элементов 
	с 0-й позиции.
-------------------------------------*/
int sum_numbers(int *buffer, int length) {
    int sum = 0;
    int i;
    for (i = 0; i < length; i++) {
        if (buffer[i] % 2 == 0 && buffer[i] != 0) {
            sum += buffer[i];
        }
    }
    return sum;
}

/*------------------------------------
	Функция должна находить
	все элементы, на которые нацело
	делится переданное число и
	записывает их в выходной массив.
-------------------------------------*/
int find_numbers(int *buffer, int length, int number, int *numbers) {
    int i, count = 0;
    for (i = 0; i < length; i++) {
        if (buffer[i] != 0 && number % buffer[i] == 0) {
            numbers[count] = buffer[i];
            count++;
        }
    }
    return count;
}

/*------------------------------------
	Функция ввода данных из stdin.
	Сначала считывает длину массива,
	затем — сам массив.
	Проверяет корректность.
	В случае ошибки длина будет = 0.
-------------------------------------*/
void input(int *buffer, int *length) {
    int i, temp, result = 1;
    char c;

    if (scanf("%d", length) != 1 || *length <= 0 || *length > MAX_SIZE) {
        result = 0;
    }

    for (i = 0; i < *length && result; i++) {
        if (scanf("%d", &temp) != 1) {
            result = 0;
        }
        buffer[i] = temp;
    }

    while ((c = getchar()) != '\n' && c != EOF) {
        if (c != ' ' && c != '\t') {
            result = 0;
        }
    }

    if (!result) {
        *length = 0;
    }
}

/*------------------------------------
	Функция вывода массива в stdout
	через пробел.
-------------------------------------*/
void output(int *buffer, int length) {
    int i;
    for (i = 0; i < length; i++) {
        printf("%d", buffer[i]);
        if (i < length - 1) {
            printf(" ");
        }
    }
    printf("\n");
}
