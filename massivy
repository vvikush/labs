#define _CRT_SECURE_NO_WARNINGS
#define swap(x,y)  {int z = x; x = y; y=z;};
#include<stdio.h>




void vvod (int, int, int[10][10]);
int obrabotka (int, int, int[10][10], int[100]);
void vyvod(int, int, int[10][10]);
 

void vvod(int* N, int* M, int matr_nachal[10][10])
{
	printf("ukazhite N: ");				
	scanf("%d", N);
	printf("ukazhite M: ");				
	scanf("%d", M);
	printf("vvedite massiv %d na %d :\n", *N, *M);
	for (int i1 = 0; i1 < *N; i1++)
	{
		for (int j1 = 0; j1 < *M; j1++)
		{
			scanf("%d", &matr_nachal[i1][j1]);
		}
	}

	printf("vvedeniy massiv: \n");
	for (int i1 = 0; i1 < *N; i1++)
	{
		for (int j1 = 0; j1 < *M; j1++)
		{
			printf("%d ", matr_nachal[i1][j1]);
		}
		printf("\n");
	}
};

int obrabotka(int N, int M, int matr_izm[10][10], int rez[100])
{
	int mass_zakr[100] = { 0 };
	int rez_elem = 0;
	int elem_mass_zakr = 0;
	int min = _CRT_INT_MAX;

	printf("\notsortiruem nuzhnie nam elementy: \n");
	printf("_____________________________________\n");

	for (int i1 = 0; i1 < N; i1++)
	{
		for (int j1 = 0; j1 < M; j1++)
		{
			elem_mass_zakr = 0;
			min = _CRT_INT_MAX;
			// заполняем temp выделенными элементами A(i1, j1) 
			for (int i2 = 0; i2 < N; i2++)
			{
				for (int j2 = 0; j2 < M; j2++)
				{
					if ((!(j2 < j1 || i1 != i2)) && (j2 < j1 + 3))									                mass_zakr[elem_mass_zakr] = matr_izm[i2][j2];
					else if (j1 + 2 == j2)					                                                        mass_zakr[elem_mass_zakr] = matr_izm[i2][j2];
					else if (1 <= (j1 - j2) && 1 <= (i1 - i2) && (j1 - j2) == (i1 - i2))	                        mass_zakr[elem_mass_zakr] = matr_izm[i2][j2];
					else if (1 <= (j1 - j2) && 1 <= (i2 - i1) && (j1 - j2) == (i2 - i1))	                        mass_zakr[elem_mass_zakr] = matr_izm[i2][j2];
					else continue;
					++elem_mass_zakr;
				}
			}

			// сортируем mass
			for (int elem1 = 0; elem1 < elem_mass_zakr; elem1++)
			{
				for (int elem2 = elem1 + 1; elem2 < elem_mass_zakr; elem2++)
				{
					if (mass_zakr[elem1] > mass_zakr[elem2]) swap(mass_zakr[elem1], mass_zakr[elem2]);
				}
			}
	
			for (int elem1 = 0; elem1 < elem_mass_zakr; elem1++)
			{
				printf("%d\t", mass_zakr[elem1]);
			}
			printf("\n_____________________________________\n\n");

			
			//находим наименьший модуль разности

			for (int elem1 = 0; elem1 < elem_mass_zakr - 1; elem1++)
			{
				if (mass_zakr[elem1 + 1] - mass_zakr[elem1] < min) 
				{
					min = mass_zakr[elem1 + 1] - mass_zakr[elem1]; 
					if (min == 0) break;
				}
			}
			rez[rez_elem++] = min;

		}
	}
};

void vyvod(int N, int M, int matr[100])
{
	int rez_tabl = 0;
	printf("\ntablica s rezultatami: \n");
	printf("+---------------+---------------+---------------+---------------+\n");
	printf("|     №N/N      |       i       |       j       |    Rezultat   |\n");
	printf("+---------------+---------------+---------------+---------------+\n");
	
	int k = 1;
	for (int i_nachal = 0; i_nachal < N; i_nachal++)
	{
		for (int j_nachal = 0; j_nachal < M; j_nachal++)
		{
			
			printf("|% *d       |% *d       |% *d       |% *d       |\n", 8, k, 8, i_nachal, 8, j_nachal, 8, matr[rez_tabl]);
			printf("+---------------+---------------+---------------+---------------+\n");
			rez_tabl++;
			k++;
		}
	}
};

int main()
{
	int rez[100] = { 0 };
	int matr_nachal[10][10] = { 0 };
	int N, M;

	vvod(&N, &M, matr_nachal);

	obrabotka(N, M, matr_nachal, rez);

	vyvod(N, M, rez);

	return 0;
} 

